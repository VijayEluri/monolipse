<?xml version="1.0"?>
<project name="monolipse" default="all">
	
	<property name="target.dir" value="./plugins" />
	<property name="updatesite.dir" value="./update-site/plugins" />
	<property name="feature.version" value="1.2.0" />
	<property name="boo.dir" value="../boo/bin" />
	<property name="javac" value="javac" />
	<property name="eclipse.dir" value="../../java/eclipse" />
	
	<target name="all" depends="monolipse.core, monolipse.nunit, monolipse.ui">
	</target>
	
	<target name="install">
		<property name="target.dir" value="${eclipse.dir}/plugins" />
		<call target="all" />
	</target>
	
	<target name="monolipse.core" depends="init">

		<copy todir="monolipse.core/bin">
			<fileset basedir="monolipse.core/lib/boojay">
				<include name="*.dll" />
			</fileset>
		</copy>
	
		<booc
			target="library"
			output="monolipse.core/bin/monolipse.core.dll">
			<sources basedir="monolipse.core/boo/monolipse.core">
				<include name="*.boo" />
			</sources>
		</booc>
		
		<booc target="exe"
			output="monolipse.core/bin/monolipse.server.exe">
			<sources basedir="monolipse.core/boo/monolipse.server">
				<include name="*.boo" />
			</sources>
			<references basedir="monolipse.core/bin">
				<include name="monolipse.core.dll" />
				<include name="Boojay.Compilation.dll" />
			</references>
		</booc>
	
		<property name="plugin" value="monolipse.core" />
		<call target="package-plugin" />
		
	</target>
	
	<target name="extract-bundle-properties">
		<boo>
		import System.IO
		
		def bundleVersion(manifest as string):
			matchResult = /Bundle-Version:\s*((\d|\.)+)\s+/.Match(manifest)
			return matchResult.Groups[1].ToString()
			
		def bundleRequired(manifest as string):
			matchResult = @/Require-Bundle:\s*((.|\n)*)Eclipse-LazyStart/.Match(manifest)
			bundleString = matchResult.Groups[1].ToString()
			bundles = s for s in /\n,;/.Split(bundleString) if len(s.Trim()) > 0
			return join(bundles, ",")
		
		def readManifest():
			return File.ReadAllText("${plugin()}/META-INF/MANIFEST.MF")
			
		def plugin():
			return Project.Properties["plugin"]
			
		manifest = readManifest()
		Project.Properties["bundle.version"] = bundleVersion(manifest)
		#Project.Properties["bundle.required"] = bundleRequired(manifest)
		</boo>
	</target>
	
	<fileset id="common.classpath" basedir="${eclipse.dir}/plugins">
		<include name="**/org.eclipse.osgi_*.jar" />
		<include name="**/org.eclipse.equinox.common_*jar" />
		<include name="**/org.eclipse.equinox.registry_*jar" />
		<include name="**/org.eclipse.equinox.preferences_*jar" />
		<include name="**/org.eclipse.core.jobs_*.jar" />
		<include name="**/org.eclipse.core.runtime_*.jar" />
		<include name="**/org.eclipse.core.resources_*.jar" />
		<include name="**/org.eclipse.debug.core_*.jar" />
		<include name="**/jdimodel*jar" />
		<include name="**/org.eclipse.jdt.core_*jar" />
		<include name="**/org.eclipse.jdt.launching_*jar" />
		<include name="**/org.eclipse.jdt.compiler*jar" />
	</fileset>
	
	<fileset id="monolipse.ui.classpath" basedir="${eclipse.dir}/plugins">
		<include name="**/org.eclipse.jface_*jar" />
		<include name="**/org.eclipse.ui.workbench_*.jar" />
		<include name="**/org.eclipse.swt*.jar" />
		<include name="**/org.eclipse.ui.editors_*.jar" />
		<include name="**/org.eclipse.text_*.jar" />
		<include name="**/org.eclipse.jface.text_*jar" />
		<include name="**/org.eclipse.ui.workbench.texteditor_*.jar" />
		<include name="**/org.eclipse.ui.ide_*.jar" />
		<include name="**/org.eclipse.debug.ui_*jar" />
		<include name="**/org.eclipse.core.commands_*.jar" />
		
		<include name="**/org.eclipse.ui_*jar" />
		<include name="**/org.eclipse.ui.views_*jar" />
		<include name="**/org.eclipse.ui.console_*jar" />
		<include name="**/org.eclipse.debug.ui_*jar" />
		<include name="**/org.eclipse.jdt.ui_*.jar" />
	</fileset>
	
	<fileset id="monolipse.nunit.classpath" basedir="${eclipse.dir}/plugins">
		<include name="**/org.eclipse.jface_*jar" />
		<include name="**/org.eclipse.ui.workbench_*.jar" />
		<include name="**/org.eclipse.swt*.jar" />
		<include name="**/org.eclipse.ui.editors_*.jar" />
		<include name="**/org.eclipse.text_*.jar" />
		<include name="**/org.eclipse.jface.text_*jar" />
		<include name="**/org.eclipse.ui.workbench.texteditor_*.jar" />
		<include name="**/org.eclipse.ui.ide_*.jar" />
		<include name="**/org.eclipse.debug.ui_*jar" />
		<include name="**/org.eclipse.core.commands_*.jar" />
		
	</fileset>
	
	<target name="compile-plugin" depends="extract-bundle-properties">
		
		<property name="plugin.src.dir" value="${plugin}/src" />
		
		<fileset id="plugin.source.files" basedir="${plugin.src.dir}">
			<include name="**/*.java" />
		</fileset>
		
		<boo>
			<references basedir="${boo.dir}">
				<include name="Boo.Lang.PatternMatching.dll" />
			</references>
			<code>
			import Boo.Lang.PatternMatching
			
			def fileset(id as string) as NAnt.Core.Types.FileSet:
				return Project.DataTypeReferences[id]
				
			def classPath():
				commonClasspath = fileset("common.classpath")
				yieldAll commonClasspath.FileNames
				
				pluginClasspath = fileset("${plugin()}.classpath")
				if pluginClasspath is not null:
					yieldAll pluginClasspath.FileNames
					
				match plugin():
					case "monolipse.core":
						yield "monolipse.core/lib/xstream/xstream-1.1.2.jar"
					case "monolipse.ui":
						yield "monolipse.core/bin"
					case "monolipse.nunit":
						yield "monolipse.core/bin"
						yield "monolipse.ui/bin"
				
			def plugin():
				return Project.Properties["plugin"]
				
			Project.Properties["sources"] = join(fileset("plugin.source.files").FileNames)
			Project.Properties["classpath"] = join(classPath(), ":")
			</code>
		</boo>
		
		<mkdir dir="${plugin}/bin" />
		
		<!--	
		<echo>
	compiling ${plugin} java source files: ${sources}
	classpath: ${classpath}
		</echo>
		-->
		<exec program="${javac}">
			<arg value="-d" />
			<arg file="${plugin}/bin" />
			
			<arg value="-g" />
			
			<arg value="-sourcepath" />
			<arg value="${plugin.src.dir}" />
			
			<arg value="-classpath" />
			<arg path="${classpath}" />
			
			<arg line="${sources}" />
		</exec>
	</target>
	
	<target name="package-plugin" depends="compile-plugin">
	
		<property name="plugin.fullname" value="${plugin}_${bundle.version}" />
		<property name="plugin.dir" value="${target.dir}/${plugin.fullname}" />
		
		<copy todir="${plugin.dir}" overwrite="true">
			<fileset basedir="${plugin}">
				<include name="bin/*.exe" />
				<include name="bin/*.dll" />
				<include name="bin/*.mdb" />
				
				<exclude name="bin/*.Tests.dll" />
				<exclude name="bin/*.Tests.mdb" />

				<include name="lib/**/**" />
				<include name="icons/**" />
				<include name="META-INF/**" />
				<include name="plugin.xml" />
			</fileset>
		</copy>
		
		<zip zipfile="${plugin.dir}/${plugin}.jar">
			<fileset basedir="${plugin}/bin">
				<include name="**/*.class" />
			</fileset>
		</zip>
		
		<zip zipfile="${updatesite.dir}/${plugin}_${feature.version}.jar">
			<fileset basedir="${plugin.dir}">
				<include name="**/*.*" />
			</fileset>
		</zip>
	</target>
	
	<target name="monolipse.nunit" depends="monolipse.core, monolipse.ui">
	
		<copy todir="monolipse.nunit/lib" overwrite="true">
			<fileset basedir="monolipse.core/bin">
				<include name="monolipse.core.dll" />
				<include name="monolipse.core.dll.mdb" />
			</fileset>
		</copy>
		
		<copy todir="monolipse.nunit/bin">
			<fileset basedir="monolipse.nunit/lib">
				<include name="**/**" />
			</fileset>
		</copy>
	
		<booc target="exe" output="monolipse.nunit/bin/monolipse.nunit.server.exe">
			<sources basedir="monolipse.nunit/boo/monolipse.nunit.server">
				<include name="*.boo" />
			</sources>
			<references basedir="monolipse.nunit/bin">
				<include name="monolipse.core.dll" />
			</references>
		</booc>
	
		<property name="plugin" value="monolipse.nunit" />
		<call target="package-plugin" />
		
	</target>
	
	<target name="monolipse.ui" depends="monolipse.core">
		<property name="plugin" value="monolipse.ui" />
		<call target="package-plugin" />
	</target>

	<target name="update-boojay">
		<copy todir="monolipse.core/lib/boojay">
			<fileset basedir="../boojay/dist">
				<include name="*.*" />
			</fileset>
		</copy>
	</target>
	
	<target name="clean-plugin">
		<delete>
			<fileset basedir="${plugin}/bin">
				<include name="**/*" />
				<exclude name="**/*.class" />
			</fileset>
		</delete>
	</target>

	<target name="clean">
		<property name="plugin" value="monolipse.core" />
		<call target="clean-plugin" />
		<property name="plugin" value="monolipse.ui" />
		<call target="clean-plugin" />
		<property name="plugin" value="monolipse.nunit" />
		<call target="clean-plugin" />
		<delete dir="plugins" />
	</target>
	
	<target name="init">
		<loadtasks assembly="${boo.dir}/Boo.NAnt.Tasks.dll" />
	</target>

</project>
